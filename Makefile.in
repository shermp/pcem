srcdir = @srcdir@
VPATH = @srcdir@

CC := @CC@
CXX := @CXX@
WINDRES := @WINDRES@

prefix := @prefix@
exec_prefix := @exec_prefix@
bindir := @bindir@

BIN := @PACKAGE_NAME@
BUILD_OS := @BUILD_OS@
CPU := @CPU@
USE_ALSA := @USE_ALSA@
USE_NETWORKING := @USE_NETWORKING@

pcem_LIBS := @LIBS@
# for some reason, wx-config includes '-fpermissive' in CFLAGS
pcem_CFLAGS := $(subst -fpermissive,,@CFLAGS@)
pcem_CXXFLAGS := @CXXFLAGS@
pcem_DEFS := @DEFS@

INSTALL_DIR := $(DESTDIR)$(prefix)
ifeq ($(BUILD_OS),win)
	PCEM_BIN := $(addsuffix .exe,$(BIN))
	# During install on Windows, require ntldd
	NTLDD := $(shell command -v ntldd 2> /dev/null)
	BIN_DIR := $(INSTALL_DIR)
else
	PCEM_BIN := $(BIN)
	BIN_DIR := $(bindir)
endif

include $(srcdir)/src/sources.mk

# Gather together required source files
PCEM_SOURCES := $(PCEM_SRC) $(DOSBOX_SRC) $(RESID_SRC) $(MINIVHD_SRC) $(WX_SRC) $(WXXRC_RES)

ifeq ($(CPU),i386)
	PCEM_SOURCES += $(I386_SRC)
endif
ifeq ($(CPU),x86_64)
	PCEM_SOURCES += $(X86_64_SRC)
endif
ifeq ($(CPU),arm)
	PCEM_SOURCES += $(ARM_SRC)
endif
ifeq ($(CPU),arm64)
	PCEM_SOURCES += $(ARM64_SRC)
endif

ifeq ($(USE_NETWORKING),1)
	PCEM_SOURCES += $(NET_SRC)
endif

ifeq ($(BUILD_OS),linux)
	PCEM_SOURCES += $(LINUX_SRC)
ifeq ($(USE_ALSA),1)
	PCEM_SOURCES += $(ALSA_SRC)
else
	PCEM_SOURCES += $(NON_ALSA_SRC)
endif
endif
ifeq ($(BUILD_OS),win)
	PCEM_SOURCES += $(WIN_SRC)
endif
ifeq ($(BUILD_OS),macosx)
	PCEM_SOURCES += $(OSX_SRC)
endif
ifeq ($(BUILD_OS),other)
	PCEM_SOURCES += $(OS_OTHER_SRC)
endif

SRC := $(addprefix src/,$(PCEM_SOURCES))
XRC_SRC := $(addprefix src/,$(WXXRC_SRC))
XRC_RES := $(addprefix src/,$(WXXRC_RES))
RC_SRC := $(addprefix src/,$(WIN_RC_SRC))
RC_RES := $(addsuffix .res,$(basename $(RC_SRC)))
OBJ := $(addsuffix .o,$(basename $(SRC) $(XRC_RES)))
ifeq ($(BUILD_OS),win)
	OBJ += $(RC_RES)
endif

DEPS = $(addsuffix .d,$(OBJ))
DEPS_FLAGS = -MMD -MP -MF $@.d

.PHONY: all
all: $(PCEM_BIN)

$(PCEM_BIN): $(OBJ)
	$(CXX) $^ -o $@ $(pcem_LIBS)

$(XRC_RES): $(XRC_SRC)
	-wxrc -c $< -o $@

$(RC_RES): $(RC_SRC)
	mkdir -p $(dir $@)
	$(WINDRES) -i $< --input-format=rc -o $@ -O coff 

%.o : %.c
	mkdir -p $(dir $@)
	$(CC) $(pcem_CFLAGS) $(pcem_DEFS) $(DEPS_FLAGS) -c $< -o $@

%.o : %.cc
	mkdir -p $(dir $@)
	$(CXX) $(pcem_CXXFLAGS) $(pcem_DEFS) $(DEPS_FLAGS) -c $< -o $@

%.o : %.cpp
	mkdir -p $(dir $@)
	$(CXX) $(pcem_CXXFLAGS) $(pcem_DEFS) $(DEPS_FLAGS) -c $< -o $@

.PHONY: clean
clean:
	rm -f $(PCEM_BIN) $(OBJ) $(XRC_RES) $(DEPS)

.PHONY: install
install:
ifeq ($(BUILD_OS),win)
ifndef NTLDD
$(error ntldd required when installing on Windows)
endif
	mkdir -p "$(BIN_DIR)"
	cp $(PCEM_BIN) "$(BIN_DIR)"
	# Find and copy all required dll files
	for library in $$($(NTLDD) -R "$(PCEM_BIN)" | sed -e 's/^[[:blank:]]*//g' | cut -d ' ' -f 3 | grep -i 'mingw' | sed -e 's|\\|/|g'); do \
		cp "$$library" "$(BIN_DIR)"; \
	done
	cp -R "$(srcdir)/roms" "$(BIN_DIR)" 
	cp -R "$(srcdir)/nvr" "$(BIN_DIR)"
	cp -R "$(srcdir)/configs" "$(BIN_DIR)"

else ifeq ($(BUILD_OS),linux)
	mkdir -p $(BIN_DIR)
	cp $(PCEM_BIN) $(BIN_DIR)
endif
endif

-include $(DEPS)
